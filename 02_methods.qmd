# Expert Opinion Methods & participation

```{r load curated data, echo = F, include = F, eval = T }
extraction.location <- "Data\\Delphi round 1\\"
load(paste0(extraction.location,"curated.RData"))
```

```{r libraries_data, echo = F, include = F, eval = T }

# LIBARIES ---------------------------------------------------------------
# library(readxl)
library(tidyverse)
# library(stringr)
# library(plotly)
# library(htmltools)
# library(htmlwidgets)
library(gridExtra)
library(grid)
library(DT)
library(ggiraph)
library(cowplot)
# library(ggnewscale)
# library(Polychrome)
source("Scripts\\functions_delphi_analysis.R")

forms.direct <- "Data\\Delphi round 1\\response sheets\\"
extraction.location <- "Data\\Delphi round 1\\"

```

Expert opinion on the value function and weighting for each indicator was elicited using the Delphi method.

## The Delphi method

The Delphi method is a well-established method designed to collect and distill expert knowledge and has a history of successful use in supporting conservation action where empirical evidence is insufficient and information is needed rapidly to inform decisions. It's transparency and repeatability also add to its appeal.

The Delphi method relies on using repeated surveys where participants are asked the same questions in at least two to three ‘rounds’ . Between rounds participants review and consider the answers given by all panel-members and can then revise their answers, increasing their reliability <!-- (Edwards et al., 2011) --> and identifying areas where agreements and disagreements in understanding occur. <!-- (Buckley, 1995; Kangas, Alho, Kolehmainen, & Mononen, 1998; Landeta, 2006). -->

## Ellicitation of expert opinion

Each participant either attended an introductory workshop to the process, or was taken through individually. A sub-section of participants were also involved in development the proposed methods to measure each indicator in the field. Answers were submitted into individual Excel spread sheets, with questions relating to:

-   Value functions describing how each indicator related to WEC, in typical conditions.
    -   These were entered as points representing potential indicator measurements and that potential measurement's corresponding relative value (on a 0-100 scale from low to high).
-   Weightings describing the relative importance of each indicator to WEC, in typical conditions (by which an indicator's value would be multiplied).
-   Certainty around value function and weighting estimates (subjective score 0-5), to aid participants in reviewing responses.
-   Comments or concerns relating to: situations where these "typical" responses might be inappropriate, the proposed method to measure indicators, and any other relevant information.

Participants were encouraged to keep a clear distinction between the quantitative responses provided (i.e. value functions and weightings under typical conditions) and exceptions to those typical relationships (that they highlighted in their comments).

Participants were instructed that noted exceptions would be analysed and, where appropriate, used to inform future development of the WEC measure to account for important nuance.

## Analysis Method

### Edits to responses

In some cases where deemed appropriate (e.g. where respondents had described a linear trend using few, widely spaced points), points were added to value functions by visual interpolation. Some points where also added by extrapolation where a maximum/minimum value was clearly implied, and corrections where made to clearly erroneous points following individual consultation with respondents.

## Scaling values and weights

Values and weights are all measured relative to each other. Some respondents did not use the full 0 to 100 range for all value functions and weights. Comparison between participants requires that they all use the same scale, and so all value functions where scaled from 0 to 100 and weightings were scaled so that the highest indicator weighting for each panelist was 100.

<button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#Scaling_info_vf" aria-expanded="false" aria-controls="collapseExample">

Toggle details of responses requiring scaling - value functions

</button>

</p>

::: {#Scaling_info_vf .collapse}
::: {.card .card-body}
**Value functions** scaled for:

`r paste0("<br>", which.scaled$vf)`
:::
:::

<button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#Scaling_info_wts" aria-expanded="false" aria-controls="collapseExample">

Toggle details of responses requiring scaling - weights

</button>

</p>

::: {#Scaling_info_wts .collapse}
::: {.card .card-body}
**Weights** were scaled for:

`r paste0("<br>- ", which.scaled$wt)`
:::
:::

### Reviewing results between rounds

A copy of this report was circulated to respondents between rounds to allow respondents to investigate estimates provided by others, and their certainties.

Where appropriate value functions where plotted categorically (with box plots summarising the estimated value at each category), and continuously. Indicator relative weightings were presented on boxplots, including the mean and median estimates. Interactive hover-text displayed respondent name and their certainty in their estimate.

# Participation and survey completion

## Round 1 {.tabset .tabset-fade .tabset-pills}

`r has_completed$respondent_names %>% unique() %>% length()` experts from Woodland Trust and Plantlife staff were invited to provide their opinion the value and weight of indicators.

`r sum(completed_summary[,2:5] %>% rowSums() >0)` have provided a response as of `r Sys.Date() %>% format("%e %b %Y")`.

Of these, `r sum((completed_summary[,2:5] %>% rowSums() >0) & (completed_summary[,2:5] %>% rowSums() < (4* has_completed$indicator_name %>% unique() %>% length() ) ))` remain partially incomplete. The chart below summarises participant completion of different elements of the survey. For more detail see table (button below chart).

```{r  participation_chart - make, echo = F, eval = F }

# use df to ggplot
# The first legitimate use of a pie chart in my carer!

max_count = max(completed_summary$vf)

create_gg_pie_chart <- function(count, max_count) {
  percentage <- count / max_count * 100
  pie_chart <- ggplot(data.frame(x = c("Done", "Remaining"), y = c(count, max_count - count)),
                      aes(x = "", y = y, fill = x)) +
    geom_bar(width = 1, stat = "identity") +
    scale_fill_manual(values = c("steelblue", "lightgray")) +  # Specify custom colors
    coord_polar(theta = "y") +
    theme_void() +
    theme(legend.position = "none")
  
  return(pie_chart)
  
}

gg_pie_charts <- list(NA)
bk = 1
for (i in 1:(length(completed_summary$respondent_names))){
  for (ii in 1:(dim(completed_summary)[2]-1)){
    count <- completed_summary[i,1+ii] %>% as.numeric()
    gg_pie_charts[[bk]] <-  create_gg_pie_chart(count, length(unique(df$indicator_name)))
  bk = bk+1
  }}

pie_matrix <- arrangeGrob(grobs = gg_pie_charts, nrow = length(completed_summary$respondent_names), ncol = length(colnames(completed_summary[, c("wt", "wt_cert", "vf", "vf_cert")])))
# Add row names (respondent names)
row_names <- completed_summary$respondent_names

# Add column names
col_names <- c("Value func", "VF cert", "Weights", "wt cert")

combine <- rbind(tableGrob(t(c(col_names)), theme = ttheme_minimal(), rows = ""), 
                 cbind(tableGrob(row_names, theme = ttheme_minimal()), 
                       arrangeGrob(grobs = gg_pie_charts, nrow = length(row_names), ncol = length(col_names)),  size = "last"), size = "last")


save(combine, file = "Figs//gg_pie_charts.RData")

```

```{r  participation_chart - plot, echo = F, fig.cap = 'Completion of expert opinion survey components by each panelist (coloured portion of pies) for value functions (Value func), value function certainties (VF cert), indicator weightings (Weights) and weighting certainties (wt certs).', fig.height=9 }
load(file = "Figs//gg_pie_charts.RData")

# Convert the list of pie charts to a grid using grid.arrange

grid.newpage()
grid.draw(combine)

```

```{r what needs done by participants details, eval = T}

# Create a data frame with participant names and the four columns
participant_table <- data.frame(respondent_names = completed_summary$respondent_names,
                                vf = "",
                                vf_cert = "",wt = "",
                                wt_cert = "",
 stringsAsFactors = FALSE)

# Iterate over each participant and update the table with the indicators not completed
for (i in 1:nrow(completed_summary)) {
  n.indicators <- has_completed$indicator_name %>% unique() %>% length()
  participant <- completed_summary[i, "respondent_names"] %>% as.character()
  not_completed_wt <- has_completed$sheet_name[has_completed$respondent_names == participant & has_completed$wt == FALSE]
  not_completed_wt_cert <- has_completed$sheet_name[has_completed$respondent_names == participant & has_completed$wt_cert == FALSE]
  not_completed_vf <- has_completed$sheet_name[has_completed$respondent_names == participant & has_completed$vf == FALSE]
  not_completed_vf_cert <- has_completed$sheet_name[has_completed$respondent_names == participant & has_completed$vf_cert == FALSE]
  
  if (length(not_completed_wt) == n.indicators) not_completed_wt <- "all"
  if (length(not_completed_wt_cert) == n.indicators) not_completed_wt_cert <- "all"
  if (length(not_completed_vf) == n.indicators) not_completed_vf <- "all"
  if (length(not_completed_vf_cert) == n.indicators) not_completed_vf_cert <- "all"

  participant_table[participant_table$respondent_names == participant, "wt"] <- paste(not_completed_wt, collapse = ", ")
  participant_table[participant_table$respondent_names == participant, "wt_cert"] <- paste(not_completed_wt_cert, collapse = ", ")
  participant_table[participant_table$respondent_names == participant, "vf"] <- paste(not_completed_vf, collapse = ", ")
  participant_table[participant_table$respondent_names == participant, "vf_cert"] <- paste(not_completed_vf_cert, collapse = ", ")
}

# Print the participant table

names(participant_table) <- c("Respondent", "Value Functions", "vf certs", "Weights", "wt certs")

participant_table %>%  
    datatable(extensions = c('FixedColumns',"FixedHeader"),
              options = list(scrollX = T, 
                             scrollY = '400px',  # Set the desired height for the table
                             scrollCollapse = TRUE,

                             paging = F,
                             fixedHeader=F,
                             dom = 't',
                             autoWidth = TRUE, fixedColumns = list(leftColumns = 1) #,
                             # fixedColumns = list(leftColumns = 1) ,
                             # buttons = c('copy', 'csv')
                             ),
              rownames = F#,
              #container = sketch.lcm.areas
              ) %>% 
    formatStyle( columns = c("Respondent"), fontWeight = 'bold', `text-align` = 'left', "white-space" = "nowrap")# %>% 

```
