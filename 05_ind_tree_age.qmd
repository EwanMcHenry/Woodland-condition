# Tree age distribution

```{r load curated data, echo = F, include = F, eval = T }
extraction.location <- "Data\\Delphi round 1\\"
load(paste0(extraction.location,"curated.RData"))
```

```{r libraries_data, echo = F, include = F, eval = T }

# LIBARIES ---------------------------------------------------------------
# library(readxl)
library(tidyverse)
library(ggpubr)
library(plotly)
library(htmltools)

# library(stringr)
# library(plotly)
# library(htmlwidgets)
# library(gridExtra)
# library(grid)
# library(DT)
# library(ggiraph)
# library(cowplot)
# library(ggnewscale)
# library(Polychrome)
source("Scripts\\functions_delphi_analysis.R")

forms.direct <- "Data\\Delphi round 1\\response sheets\\"
extraction.location <- "Data\\Delphi round 1\\"

```

```{r vf Tree age size distribution - init, echo = F , results="asis"}

ind.num = 1
indicator_name = ind.matcher.df$indicator_name[ind.num]
ind.axis.title <- ind.matcher.df$ind.axis.title[ind.num]

filtered_data <- df[df$indicator_name == indicator_name, ] %>% 
  mutate(respondant_name = as.factor(respondant_name))

```

`r paste(length(unique(filtered_data$respondant_name)))` respondents.

::: panel-tabset
#### Categorised value function

```{r vf Tree age size distribution - categorical, echo = F , results="asis"}

categorised_vf_fig()

## table
filtered_data %>%
  group_by(measure) %>%
  summarise(Mean = mean(value, na.rm = TRUE) %>% round(digits = 1),
            'Standard deviation' = sd(value, na.rm = TRUE) %>% round(digits = 1)) %>% 
knitr::kable()

```

#### Continuous Value function

```{r vf Tree age size distribution - continuous, echo = F , results="asis"}


continuous_vf_fig <- function(line.col = NA){
  plot <- ggplot_gam_resp_vf(indicator_name = indicator_name,
                           x.lab = ind.axis.title, gam.col = line.col)

ggsave(filename = paste0("Figs//ind_",
                         formatC(ind.num, width = 2, format = "d", flag = "0"),
                         "_", indicator_name, "vf_continuous.png"),
       plot = plot,
       width = 300, height = 150, units = "mm")

ggplotly(plot, tooltip = "text", dynamicTicks = F) %>% 
    config(displayModeBar = F) %>% 
    layout(yaxis = list(range = c(-5, 105)))
}
  
continuous_vf_fig()

```

#### Weights

```{r vf Tree age size distribution - weights, fig.width= 4, echo = F , results="asis"}

ggplot_resp_weight_ind(indicator_name = indicator_name)

```
:::

### Comments

VFs - consensus likely:\
- All continuous relationships have same shape.\
- Complete agreement on upper and lower value.\
- Some put maximum value at 3 classes.

Weight - Disagreement:\
- Two camps, giving relatively low and high weights (compared to other indicators) at c. 60 and 90, respectively.
